# Generated by Django 5.0.3 on 2025-09-14 02:08

import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('communication', '0004_alter_icebreakerresponse_unique_together_and_more'),
        ('events', '0003_event_event_type_event_virtual_link_and_more'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.AddField(
            model_name='icebreakerresponse',
            name='base_points',
            field=models.IntegerField(default=0, help_text='Base points for activity type'),
        ),
        migrations.AddField(
            model_name='icebreakerresponse',
            name='lucky_multiplier',
            field=models.FloatField(default=1.0, help_text='Random lucky bonus multiplier'),
        ),
        migrations.AddField(
            model_name='icebreakerresponse',
            name='quality_bonus',
            field=models.IntegerField(default=0, help_text='Bonus points for quality response'),
        ),
        migrations.AddField(
            model_name='icebreakerresponse',
            name='quality_score',
            field=models.FloatField(default=0.0, help_text='AI-generated quality score (0-10)'),
        ),
        migrations.AddField(
            model_name='icebreakerresponse',
            name='response_time_seconds',
            field=models.IntegerField(blank=True, help_text='Time taken to respond in seconds', null=True),
        ),
        migrations.AddField(
            model_name='icebreakerresponse',
            name='social_bonus',
            field=models.IntegerField(default=0, help_text='Bonus points from likes/engagement'),
        ),
        migrations.AddField(
            model_name='icebreakerresponse',
            name='speed_bonus',
            field=models.IntegerField(default=0, help_text='Bonus points for quick response'),
        ),
        migrations.AddField(
            model_name='icebreakerresponse',
            name='streak_multiplier',
            field=models.FloatField(default=1.0, help_text='Streak bonus multiplier'),
        ),
        migrations.CreateModel(
            name='IcebreakerAchievement',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField()),
                ('achievement_type', models.CharField(choices=[('streak', 'Streak Achievement'), ('speed', 'Speed Achievement'), ('social', 'Social Achievement'), ('participation', 'Participation Achievement'), ('quality', 'Quality Achievement'), ('lucky', 'Lucky Achievement')], max_length=20)),
                ('tier', models.CharField(choices=[('bronze', 'Bronze'), ('silver', 'Silver'), ('gold', 'Gold'), ('platinum', 'Platinum')], default='bronze', max_length=20)),
                ('required_value', models.IntegerField(help_text='Value needed to unlock (streak days, speed seconds, etc.)')),
                ('points_reward', models.IntegerField(default=0, help_text='Bonus points for unlocking')),
                ('icon', models.CharField(default='üèÜ', help_text='Emoji icon for achievement', max_length=10)),
                ('is_hidden', models.BooleanField(default=False, help_text='Hidden until unlocked')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'ordering': ['achievement_type', 'required_value'],
                'unique_together': {('achievement_type', 'tier', 'required_value')},
            },
        ),
        migrations.CreateModel(
            name='ResponseReaction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reaction_type', models.CharField(choices=[('like', 'üëç'), ('love', '‚ù§Ô∏è'), ('laugh', 'üòÇ'), ('wow', 'üò≤'), ('think', 'ü§î'), ('fire', 'üî•')], default='like', max_length=10)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('response', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reactions', to='communication.icebreakerresponse')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('response', 'user')},
            },
        ),
        migrations.CreateModel(
            name='UserGamificationProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('total_points', models.IntegerField(default=0)),
                ('base_points', models.IntegerField(default=0)),
                ('bonus_points', models.IntegerField(default=0)),
                ('current_streak', models.IntegerField(default=0)),
                ('longest_streak', models.IntegerField(default=0)),
                ('last_activity_date', models.DateField(blank=True, null=True)),
                ('average_response_time', models.FloatField(default=0.0, help_text='Average response time in seconds')),
                ('fastest_response_time', models.IntegerField(blank=True, help_text='Fastest response in seconds', null=True)),
                ('activities_completed', models.IntegerField(default=0)),
                ('likes_received', models.IntegerField(default=0)),
                ('likes_given', models.IntegerField(default=0)),
                ('replies_received', models.IntegerField(default=0)),
                ('replies_given', models.IntegerField(default=0)),
                ('lucky_bonus_count', models.IntegerField(default=0)),
                ('total_lucky_points', models.IntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_profiles', to='events.event')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='icebreaker_profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-total_points'],
                'unique_together': {('user', 'event')},
            },
        ),
        migrations.CreateModel(
            name='UserIcebreakerAchievement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('unlocked_at', models.DateTimeField(auto_now_add=True)),
                ('trigger_value', models.IntegerField(help_text='Value that triggered the unlock')),
                ('achievement', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='communication.icebreakerachievement')),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_achievements', to='events.event')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='icebreaker_achievements', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-unlocked_at'],
                'unique_together': {('user', 'achievement', 'event')},
            },
        ),
    ]
