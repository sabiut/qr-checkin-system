# Generated by Django 5.0.3 on 2025-09-07 02:19

import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('events', '0003_event_event_type_event_virtual_link_and_more'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='EventNetworkingSettings',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('enable_networking', models.BooleanField(default=True)),
                ('enable_attendee_directory', models.BooleanField(default=True)),
                ('enable_qr_exchange', models.BooleanField(default=True)),
                ('enable_contact_export', models.BooleanField(default=True)),
                ('allow_industry_filter', models.BooleanField(default=True)),
                ('allow_interest_filter', models.BooleanField(default=True)),
                ('allow_company_filter', models.BooleanField(default=True)),
                ('require_mutual_consent', models.BooleanField(default=False)),
                ('allow_anonymous_browsing', models.BooleanField(default=True)),
                ('networking_points_enabled', models.BooleanField(default=True)),
                ('points_per_connection', models.IntegerField(default=5)),
                ('max_daily_networking_points', models.IntegerField(default=100)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('event', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='networking_settings', to='events.event')),
            ],
        ),
        migrations.CreateModel(
            name='NetworkingProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('bio', models.TextField(blank=True, help_text='Brief professional bio', max_length=500)),
                ('company', models.CharField(blank=True, max_length=200)),
                ('job_title', models.CharField(blank=True, max_length=100)),
                ('industry', models.CharField(blank=True, max_length=100)),
                ('phone_number', models.CharField(blank=True, max_length=20)),
                ('linkedin_url', models.URLField(blank=True)),
                ('twitter_handle', models.CharField(blank=True, max_length=50)),
                ('website', models.URLField(blank=True)),
                ('interests', models.JSONField(default=list, help_text='List of professional interests')),
                ('looking_for', models.JSONField(default=list, help_text="What they're looking to connect about")),
                ('allow_contact_sharing', models.BooleanField(default=True)),
                ('visible_in_directory', models.BooleanField(default=True)),
                ('share_email', models.BooleanField(default=True)),
                ('share_phone', models.BooleanField(default=False)),
                ('share_social', models.BooleanField(default=True)),
                ('networking_qr_token', models.UUIDField(default=uuid.uuid4, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='networking_profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['user__first_name', 'user__last_name'],
            },
        ),
        migrations.CreateModel(
            name='Connection',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('connection_method', models.CharField(choices=[('qr_scan', 'QR Code Scan'), ('directory', 'Attendee Directory'), ('manual', 'Manual Add'), ('mutual', 'Mutual Connection')], default='qr_scan', max_length=20)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('accepted', 'Accepted'), ('blocked', 'Blocked')], default='accepted', max_length=20)),
                ('meeting_location', models.CharField(blank=True, help_text='Where they met at the event', max_length=200)),
                ('notes_from_user', models.TextField(blank=True, help_text='Private notes from initiating user')),
                ('notes_to_user', models.TextField(blank=True, help_text='Private notes from receiving user')),
                ('points_awarded', models.IntegerField(default=0)),
                ('gamification_processed', models.BooleanField(default=False)),
                ('connected_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='networking_connections', to='events.event')),
                ('from_user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='connections_made', to=settings.AUTH_USER_MODEL)),
                ('to_user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='connections_received', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-connected_at'],
                'indexes': [models.Index(fields=['from_user', 'event'], name='networking__from_us_24c7a7_idx'), models.Index(fields=['to_user', 'event'], name='networking__to_user_5a155f_idx'), models.Index(fields=['event', 'connected_at'], name='networking__event_i_c6cb61_idx')],
                'unique_together': {('from_user', 'to_user', 'event')},
            },
        ),
        migrations.CreateModel(
            name='NetworkingInteraction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('interaction_type', models.CharField(choices=[('profile_view', 'Profile View'), ('qr_scan', 'QR Code Scan'), ('contact_share', 'Contact Share'), ('directory_search', 'Directory Search'), ('connection_request', 'Connection Request'), ('message_sent', 'Message Sent')], max_length=30)),
                ('interaction_data', models.JSONField(default=dict, help_text='Additional interaction context')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='events.event')),
                ('target_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='networking_interactions_received', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='networking_interactions', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-timestamp'],
                'indexes': [models.Index(fields=['user', 'event', 'timestamp'], name='networking__user_id_4a4705_idx'), models.Index(fields=['event', 'interaction_type', 'timestamp'], name='networking__event_i_43dd71_idx')],
            },
        ),
    ]
