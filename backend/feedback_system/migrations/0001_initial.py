# Generated by Django 5.0.3 on 2025-09-06 13:46

import django.core.validators
import django.db.models.deletion
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('events', '0003_event_event_type_event_virtual_link_and_more'),
        ('invitations', '0003_add_rsvp_fields'),
    ]

    operations = [
        migrations.CreateModel(
            name='FeedbackAnalytics',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('total_responses', models.IntegerField(default=0)),
                ('response_rate', models.DecimalField(decimal_places=2, default=0.0, max_digits=5)),
                ('avg_overall_rating', models.DecimalField(blank=True, decimal_places=2, max_digits=3, null=True)),
                ('avg_venue_rating', models.DecimalField(blank=True, decimal_places=2, max_digits=3, null=True)),
                ('avg_content_rating', models.DecimalField(blank=True, decimal_places=2, max_digits=3, null=True)),
                ('avg_organization_rating', models.DecimalField(blank=True, decimal_places=2, max_digits=3, null=True)),
                ('avg_nps_score', models.DecimalField(blank=True, decimal_places=2, max_digits=4, null=True)),
                ('nps_detractors', models.IntegerField(default=0)),
                ('nps_passives', models.IntegerField(default=0)),
                ('nps_promoters', models.IntegerField(default=0)),
                ('net_promoter_score', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('would_recommend_count', models.IntegerField(default=0)),
                ('would_attend_future_count', models.IntegerField(default=0)),
                ('top_positive_tags', models.JSONField(blank=True, default=list)),
                ('top_negative_tags', models.JSONField(blank=True, default=list)),
                ('last_updated', models.DateTimeField(auto_now=True)),
                ('event', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='feedback_analytics', to='events.event')),
            ],
        ),
        migrations.CreateModel(
            name='FeedbackTag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('category', models.CharField(choices=[('content', 'Content'), ('venue', 'Venue'), ('organization', 'Organization'), ('technical', 'Technical'), ('catering', 'Catering'), ('networking', 'Networking'), ('speaker', 'Speaker'), ('general', 'General')], max_length=50)),
                ('icon', models.CharField(default='tag', max_length=10)),
                ('description', models.TextField(blank=True)),
                ('is_positive', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'ordering': ['category', 'name'],
                'unique_together': {('name', 'category')},
            },
        ),
        migrations.CreateModel(
            name='EventFeedback',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('respondent_name', models.CharField(blank=True, max_length=255)),
                ('respondent_email', models.EmailField(max_length=254)),
                ('is_anonymous', models.BooleanField(default=False)),
                ('overall_rating', models.IntegerField(help_text='Overall event rating (1-5 stars)', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('venue_rating', models.IntegerField(blank=True, help_text='Venue rating (1-5 stars)', null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('content_rating', models.IntegerField(blank=True, help_text='Content quality rating (1-5 stars)', null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('organization_rating', models.IntegerField(blank=True, help_text='Event organization rating (1-5 stars)', null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('nps_score', models.IntegerField(blank=True, help_text='How likely are you to recommend this event? (0-10)', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10)])),
                ('what_went_well', models.TextField(blank=True, help_text='What did you enjoy most about the event?')),
                ('what_needs_improvement', models.TextField(blank=True, help_text='What could be improved for future events?')),
                ('additional_comments', models.TextField(blank=True, help_text='Any additional feedback or suggestions?')),
                ('would_recommend', models.BooleanField(blank=True, null=True)),
                ('would_attend_future', models.BooleanField(blank=True, null=True)),
                ('interested_topics', models.TextField(blank=True, help_text='What topics would you like to see in future events?')),
                ('submission_source', models.CharField(choices=[('email', 'Email Survey'), ('ticket', 'Ticket Page'), ('qr_code', 'QR Code Scan'), ('web_portal', 'Web Portal'), ('manual', 'Manual Entry')], default='email', max_length=50)),
                ('submitted_at', models.DateTimeField(auto_now_add=True)),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('user_agent', models.TextField(blank=True)),
                ('gamification_processed', models.BooleanField(default=False)),
                ('points_awarded', models.IntegerField(default=0)),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='feedback_responses', to='events.event')),
                ('invitation', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='invitations.invitation')),
                ('tags', models.ManyToManyField(blank=True, to='feedback_system.feedbacktag')),
            ],
            options={
                'ordering': ['-submitted_at'],
                'unique_together': {('event', 'respondent_email')},
            },
        ),
    ]
