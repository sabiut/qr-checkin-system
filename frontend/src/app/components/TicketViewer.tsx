import React, { useState, useEffect } from 'react';
import { Printer, Download, Send, Eye, FileText, Loader2 } from 'lucide-react';

interface TicketViewerProps {
  invitation: {
    id: string;
    guest_name: string;
    guest_email?: string;
    guest_phone?: string;
    ticket_html_url?: string;
    ticket_pdf_url?: string;
    qr_code_url?: string;
    event?: {
      name: string;
      date: string;
      time: string;
      location: string;
      description?: string;
    };
  };
  onSendEmail?: () => void;
}

const TicketViewer: React.FC<TicketViewerProps> = ({ invitation, onSendEmail }) => {
  const [activeView, setActiveView] = useState<'html' | 'qr'>('html');
  const [isLoading, setIsLoading] = useState(false);
  const [ticketHtml, setTicketHtml] = useState<string | null>(null);
  const [isLoadingTicket, setIsLoadingTicket] = useState(false);
  const [ticketError, setTicketError] = useState<string | null>(null);

  // Fetch the ticket HTML content directly when the component loads
  useEffect(() => {
    if (activeView === 'html') {
      fetchTicketHtml();
    }
  }, [invitation.id, activeView]);

  const fetchTicketHtml = async () => {
    try {
      setIsLoadingTicket(true);
      setTicketError(null);
      
      // Ensure QR code URL is absolute
      const apiUrl = import.meta.env.VITE_API_URL;
      let fullQrCodeUrl = invitation.qr_code_url;
      if (fullQrCodeUrl && fullQrCodeUrl.startsWith('/')) {
        fullQrCodeUrl = `${apiUrl}${fullQrCodeUrl}`;
      }
      
      // Create a simple ticket HTML as a fallback
      const fallbackHtml = `
        <html>
        <head>
          <style>
            body { font-family: Arial, sans-serif; margin: 0; padding: 20px; }
            .ticket { max-width: 500px; margin: 0 auto; border: 2px solid #4f46e5; border-radius: 8px; overflow: hidden; }
            .header { background: #4f46e5; color: white; padding: 15px; text-align: center; }
            .body { padding: 20px; }
            .footer { background: #f3f4f6; padding: 10px; text-align: center; font-size: 0.8em; }
            .section { margin-bottom: 20px; }
            .property { margin-bottom: 8px; }
            .label { font-weight: bold; }
          </style>
        </head>
        <body>
          <div class="ticket">
            <div class="header">
              <h2>${invitation.event?.name || 'Event Ticket'}</h2>
              <h3>For ${invitation.guest_name}</h3>
            </div>
            <div class="body">
              <div class="section">
                <h3>Guest Information</h3>
                <div class="property">
                  <span class="label">Name:</span> ${invitation.guest_name}
                </div>
                ${invitation.guest_email ? `
                <div class="property">
                  <span class="label">Email:</span> ${invitation.guest_email}
                </div>` : ''}
                ${invitation.guest_phone ? `
                <div class="property">
                  <span class="label">Phone:</span> ${invitation.guest_phone}
                </div>` : ''}
              </div>

              <div class="section">
                <h3>Event Details</h3>
                ${invitation.event ? `
                <div class="property">
                  <span class="label">Date:</span> ${invitation.event.date || 'TBD'}
                </div>
                <div class="property">
                  <span class="label">Time:</span> ${invitation.event.time || 'TBD'}
                </div>
                <div class="property">
                  <span class="label">Location:</span> ${invitation.event.location || 'TBD'}
                </div>` : `
                <p style="font-style: italic; color: #666;">Event details will be provided by the organizer.</p>
                `}
              </div>
              
              ${fullQrCodeUrl ? `
              <div class="section" style="text-align: center;">
                <h3>QR Code for Check-in</h3>
                <img src="${fullQrCodeUrl}" alt="QR Code" style="max-width: 200px; height: auto;">
                <p>Present this code at the event entrance</p>
              </div>` : ''}
              
              <div style="font-size: 0.8em; text-align: right; color: #666;">
                Ticket ID: ${invitation.id}
              </div>
            </div>
            <div class="footer">
              <p>This ticket is personalized and non-transferrable.</p>
              <p>Generated by QR Check-in System</p>
            </div>
          </div>
        </body>
        </html>
      `;
      
      // Try to fetch the ticket from the backend, fall back to the local version if it fails
      try {
        const apiUrl = import.meta.env.VITE_API_URL;
        const response = await fetch(`${apiUrl}/tickets/${invitation.id}/`);
        
        if (response.ok) {
          const html = await response.text();
          setTicketHtml(html);
        } else {
          console.warn("Could not fetch ticket from backend, using local version");
          setTicketHtml(fallbackHtml);
        }
      } catch (err) {
        console.error("Error fetching ticket:", err);
        setTicketHtml(fallbackHtml);
      }
    } catch (error) {
      console.error("Error in ticket handling:", error);
      setTicketError("Could not load the ticket. Please try again later.");
    } finally {
      setIsLoadingTicket(false);
    }
  };

  const handlePrint = () => {
    if (!ticketHtml) return;
    
    // Create a new window with the ticket HTML
    const printWindow = window.open('', '_blank');
    if (printWindow) {
      printWindow.document.write(ticketHtml);
      printWindow.document.close();
      printWindow.onload = () => {
        printWindow.print();
      };
    }
  };
  
  const handleSendEmail = async () => {
    if (!onSendEmail || !invitation.guest_email) return;
    
    setIsLoading(true);
    try {
      await onSendEmail();
      alert('Email sent successfully!');
    } catch (error) {
      console.error('Error sending email:', error);
      alert('Failed to send email. Please try again.');
    } finally {
      setIsLoading(false);
    }
  };

  // Function to create a download link for the HTML ticket
  const createDownloadLink = () => {
    if (!ticketHtml) return '#';
    
    const blob = new Blob([ticketHtml], { type: 'text/html' });
    return URL.createObjectURL(blob);
  };

  return (
    <div className="bg-white rounded-lg shadow overflow-hidden">
      <div className="border-b px-4 py-3 bg-gray-50 flex items-center justify-between">
        <h3 className="text-lg font-medium text-gray-700">Ticket for {invitation.guest_name}</h3>
        <div className="flex space-x-1">
          <button
            onClick={() => setActiveView('html')}
            className={`px-3 py-1 text-sm rounded ${
              activeView === 'html' 
                ? 'bg-blue-600 text-white' 
                : 'bg-gray-200 text-gray-700'
            }`}
          >
            Full Ticket
          </button>
          <button
            onClick={() => setActiveView('qr')}
            className={`px-3 py-1 text-sm rounded ${
              activeView === 'qr' 
                ? 'bg-blue-600 text-white' 
                : 'bg-gray-200 text-gray-700'
            }`}
          >
            QR Only
          </button>
        </div>
      </div>
      
      <div className="p-4">
        {activeView === 'html' ? (
          <div className="aspect-[3/4] border rounded overflow-hidden bg-gray-50">
            {isLoadingTicket ? (
              <div className="h-full flex items-center justify-center">
                <Loader2 size={40} className="animate-spin text-blue-600" />
                <span className="ml-2 text-gray-600">Loading ticket...</span>
              </div>
            ) : ticketError ? (
              <div className="h-full flex items-center justify-center text-red-500 p-4 text-center">
                <p>{ticketError}</p>
              </div>
            ) : ticketHtml ? (
              <iframe
                srcDoc={ticketHtml}
                title={`Ticket for ${invitation.guest_name}`}
                className="w-full h-full"
                sandbox="allow-same-origin"
              />
            ) : (
              <div className="h-full flex items-center justify-center text-gray-500">
                <p>No ticket available</p>
              </div>
            )}
          </div>
        ) : activeView === 'qr' && invitation.qr_code_url ? (
          <div className="p-6 flex flex-col items-center justify-center">
            <img 
              src={invitation.qr_code_url?.startsWith('/') 
                  ? `${import.meta.env.VITE_API_URL}${invitation.qr_code_url}` 
                  : invitation.qr_code_url} 
              alt="QR Code" 
              className="max-w-[200px] border-8 border-white shadow-md rounded"
            />
            <p className="mt-4 text-center text-gray-500 text-sm">
              Scan this QR code at the event entrance for check-in
            </p>
          </div>
        ) : (
          <div className="py-12 text-center text-gray-500">
            <p>No ticket available for this invitation</p>
          </div>
        )}
      </div>
      
      <div className="p-4 bg-gray-50 border-t flex flex-wrap gap-2 justify-between">
        <div className="flex flex-wrap gap-2">
          <button
            onClick={fetchTicketHtml}
            disabled={isLoadingTicket}
            className="inline-flex items-center gap-1.5 px-3 py-2 bg-white border border-gray-300 text-sm text-gray-700 rounded-md hover:bg-gray-50 disabled:opacity-50"
          >
            {isLoadingTicket ? (
              <Loader2 size={16} className="animate-spin" />
            ) : (
              <Eye size={16} />
            )}
            <span>{isLoadingTicket ? 'Loading...' : 'Refresh'}</span>
          </button>
          
          <button
            onClick={handlePrint}
            disabled={!ticketHtml || isLoadingTicket}
            className="inline-flex items-center gap-1.5 px-3 py-2 bg-white border border-gray-300 text-sm text-gray-700 rounded-md hover:bg-gray-50 disabled:opacity-50"
          >
            <Printer size={16} />
            <span>Print</span>
          </button>
        </div>
        
        <div className="flex flex-wrap gap-2">
          {invitation.ticket_pdf_url && (
            <a
              href={invitation.ticket_pdf_url}
              download={`ticket-${invitation.guest_name}.pdf`}
              className="inline-flex items-center gap-1.5 px-3 py-2 bg-white border border-gray-300 text-sm text-gray-700 rounded-md hover:bg-gray-50"
            >
              <FileText size={16} />
              <span>PDF</span>
            </a>
          )}
          
          {invitation.guest_email && onSendEmail && (
            <button
              onClick={handleSendEmail}
              disabled={isLoading}
              className={`inline-flex items-center gap-1.5 px-3 py-2 text-sm text-white rounded-md ${
                isLoading 
                  ? 'bg-green-400 cursor-not-allowed' 
                  : 'bg-green-600 hover:bg-green-700'
              }`}
            >
              <Send size={16} />
              <span>{isLoading ? 'Sending...' : 'Email'}</span>
            </button>
          )}
          
          {ticketHtml && (
            <a
              href={createDownloadLink()}
              download={`ticket-${invitation.guest_name}.html`}
              className="inline-flex items-center gap-1.5 px-3 py-2 bg-indigo-600 text-sm text-white rounded-md hover:bg-indigo-700"
            >
              <Download size={16} />
              <span>Download</span>
            </a>
          )}
        </div>
      </div>
    </div>
  );
};

export default TicketViewer;